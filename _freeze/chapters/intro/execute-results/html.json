{
  "hash": "86057bbe6850680cce5f5258ac652e72",
  "result": {
    "markdown": "\n# Introduction\n\nThis is a book created from markdown and executable code.\n\nSee @knuth84 for additional discussion of literate programming.\n\n\n## Key content\n\n:::{.callout-note collapse=\"true\"}\n\n## Expand To Learn About Collapse\n\nThis is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n\n\n## Create an object to see if it crosses chapters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtest <- 24\n```\n:::\n\n\n\n## Showing some material\n\nWhat if I want the code to be folded but not to spit results and side effects  onto the screen?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3+5\n\na <- \"happiness\"\n```\n:::\n\n\nhappiness\n\nDid it display the sum?  Was the object defined?\n\n\n## Labeling/captioning chunks\n\nWait, why do we just have 'code' labeling the chunks when you fold them. It would be much more useful to have a descriptive label you can see in the html. We can do this in each chunk with `#| code-summary: \"blah blah\"`, as below\n\n\nNote: the chunk options content itself is not shown. Below, we have: \n\n```\n\n#| label: car-talk\n#| code-fold: true\n#| code-summary: \"Car talk stuff\"\n\nhead(mtcars)\n\n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Car talk stuff\"}\nhead(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n```\n:::\n:::",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}